// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NexusApp.Data;

#nullable disable

namespace NexusApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230609175035_update_database")]
    partial class update_database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NexusApp.Areas.Customer.Models.AccountModel", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerRefId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId");

                    b.HasIndex("CustomerRefId")
                        .IsUnique();

                    b.ToTable("accounts", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Customer.Models.CustomerModel", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<DateTime?>("BirthDay")
                        .HasColumnType("datetime2");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("District")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RegistrationStatus")
                        .HasColumnType("bit");

                    b.Property<int>("ServiceRefId")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ward")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomerId");

                    b.HasIndex("ServiceRefId");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Employee.Models.EmployeeModel", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RetaishopRefId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("RetaishopRefId");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.ConnectionModel", b =>
                {
                    b.Property<int>("ConnectionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConnectionID"));

                    b.Property<string>("ConnectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConnectionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ServiceRefId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConnectionID");

                    b.HasIndex("ServiceRefId");

                    b.ToTable("connection", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.OrderDetailModel", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("ConnectionRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerRefId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeRefId")
                        .HasColumnType("int");

                    b.Property<int?>("EquipmentRefId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEquipment")
                        .HasColumnType("bit");

                    b.Property<string>("OrderSeri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("ConnectionRefId");

                    b.HasIndex("CustomerRefId");

                    b.HasIndex("EmployeeRefId");

                    b.HasIndex("EquipmentRefId");

                    b.ToTable("OrderDetail", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.PaymentModel", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<int>("AccountRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("GuaranteeRefId")
                        .HasColumnType("int");

                    b.Property<int>("OrderDetailRefId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendMail")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("PaymentId");

                    b.HasIndex("AccountRefId");

                    b.HasIndex("GuaranteeRefId");

                    b.HasIndex("OrderDetailRefId");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.RetailShop.Models.RetailShopModel", b =>
                {
                    b.Property<int>("RetailShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RetailShopId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("RetailShopId");

                    b.ToTable("retailshop", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.ServiceConnectionModel", b =>
                {
                    b.Property<int>("ServiceConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceConnectionId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Deposit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceConnectionId");

                    b.ToTable("serviceconnection", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.ServiceModel", b =>
                {
                    b.Property<int>("ServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ServicePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SubServiceConnectionRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceId");

                    b.HasIndex("SubServiceConnectionRefId");

                    b.ToTable("service", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.SubServiceConnectionModel", b =>
                {
                    b.Property<int>("SubServiceConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubServiceConnectionId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceConnectionRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SubServiceConnectionId");

                    b.HasIndex("ServiceConnectionRefId");

                    b.ToTable("subserviceconnection", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.EquipmentModel", b =>
                {
                    b.Property<int>("EquipmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EquipmentId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSupportInternet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportLine")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Serial")
                        .HasColumnType("int");

                    b.Property<int>("StorageRefId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("EquipmentId");

                    b.HasIndex("StorageRefId");

                    b.ToTable("equipment", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.StorageModel", b =>
                {
                    b.Property<int>("StorageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StorageId"));

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeRefId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("StorageId");

                    b.HasIndex("EmployeeRefId");

                    b.ToTable("storage", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.VendorModel", b =>
                {
                    b.Property<int>("VendorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VendorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("VendorId");

                    b.ToTable("vendor", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.Vendor_Equipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EquipmentRefId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("VendorRefId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentRefId");

                    b.HasIndex("VendorRefId");

                    b.ToTable("vendor_equipment", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.GuaranteeModel", b =>
                {
                    b.Property<int>("GuaranteeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GuaranteeId"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerModelCustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DepositedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeModelEmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeposit")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendMail")
                        .HasColumnType("bit");

                    b.Property<int>("SurveyRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("GuaranteeId");

                    b.HasIndex("CustomerModelCustomerId");

                    b.HasIndex("EmployeeModelEmployeeId");

                    b.HasIndex("SurveyRefId")
                        .IsUnique();

                    b.ToTable("guarantees", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.InstallModel", b =>
                {
                    b.Property<int>("InstallId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstallId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("InstalledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SurveyRefId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InstallId");

                    b.HasIndex("SurveyRefId")
                        .IsUnique();

                    b.ToTable("install", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.SurveyModel", b =>
                {
                    b.Property<int>("SurveyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurveyId"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerRefId")
                        .HasColumnType("int");

                    b.Property<string>("Descriptiontest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeRefId")
                        .HasColumnType("int");

                    b.Property<bool>("IsEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupportInternet")
                        .HasColumnType("bit");

                    b.Property<string>("ServeyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SurveyDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SurveyId");

                    b.HasIndex("CustomerRefId");

                    b.HasIndex("EmployeeRefId");

                    b.ToTable("survey", (string)null);
                });

            modelBuilder.Entity("NexusApp.Areas.Customer.Models.AccountModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Customer.Models.CustomerModel", "Customer")
                        .WithOne("Accounts")
                        .HasForeignKey("NexusApp.Areas.Customer.Models.AccountModel", "CustomerRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_accounts_customer");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("NexusApp.Areas.Customer.Models.CustomerModel", b =>
                {
                    b.HasOne("NexusApp.Areas.ServiceConnection.Models.ServiceModel", "Services")
                        .WithMany("Customers")
                        .HasForeignKey("ServiceRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_service-customer");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("NexusApp.Areas.Employee.Models.EmployeeModel", b =>
                {
                    b.HasOne("NexusApp.Areas.RetailShop.Models.RetailShopModel", "RetailShop")
                        .WithMany("Employees")
                        .HasForeignKey("RetaishopRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_retail_employee");

                    b.Navigation("RetailShop");
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.ConnectionModel", b =>
                {
                    b.HasOne("NexusApp.Areas.ServiceConnection.Models.ServiceModel", "Services")
                        .WithMany("Connections")
                        .HasForeignKey("ServiceRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_Connection");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.OrderDetailModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Financial.Models.ConnectionModel", "Connections")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ConnectionRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_orderDetail_connection");

                    b.HasOne("NexusApp.Areas.Customer.Models.CustomerModel", "Customers")
                        .WithMany("OrderDetails")
                        .HasForeignKey("CustomerRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Customer");

                    b.HasOne("NexusApp.Areas.Employee.Models.EmployeeModel", "Employees")
                        .WithMany("OrderDetails")
                        .HasForeignKey("EmployeeRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_OrderDetail_Employee");

                    b.HasOne("NexusApp.Areas.Storage.Models.EquipmentModel", "Equipments")
                        .WithMany("OrderDetails")
                        .HasForeignKey("EquipmentRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_oderDetail_equipment");

                    b.Navigation("Connections");

                    b.Navigation("Customers");

                    b.Navigation("Employees");

                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.PaymentModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Customer.Models.AccountModel", "Accounts")
                        .WithMany("Payments")
                        .HasForeignKey("AccountRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payment_account");

                    b.HasOne("NexusApp.Areas.Survey.Models.GuaranteeModel", "Guarantees")
                        .WithMany("Payments")
                        .HasForeignKey("GuaranteeRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payment_guarantees");

                    b.HasOne("NexusApp.Areas.Financial.Models.OrderDetailModel", "OrderDetails")
                        .WithMany("Payments")
                        .HasForeignKey("OrderDetailRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payment_orderDetail");

                    b.Navigation("Accounts");

                    b.Navigation("Guarantees");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.ServiceModel", b =>
                {
                    b.HasOne("NexusApp.Areas.ServiceConnection.Models.SubServiceConnectionModel", "SubServiceConnections")
                        .WithMany("ServiceModels")
                        .HasForeignKey("SubServiceConnectionRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_subserviceconnection_service");

                    b.Navigation("SubServiceConnections");
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.SubServiceConnectionModel", b =>
                {
                    b.HasOne("NexusApp.Areas.ServiceConnection.Models.ServiceConnectionModel", "ServiceConnections")
                        .WithMany("SubServiceConnectionModels")
                        .HasForeignKey("ServiceConnectionRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_serviceconnection_subserviceconnection");

                    b.Navigation("ServiceConnections");
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.EquipmentModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Storage.Models.StorageModel", "Storage")
                        .WithMany("Equipments")
                        .HasForeignKey("StorageRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_storage_equipment");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.StorageModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Employee.Models.EmployeeModel", "Employee")
                        .WithMany("Storages")
                        .HasForeignKey("EmployeeRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("storage_Employee");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.Vendor_Equipment", b =>
                {
                    b.HasOne("NexusApp.Areas.Storage.Models.EquipmentModel", "Equipment")
                        .WithMany("Vendor_Equipment")
                        .HasForeignKey("EquipmentRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_equipment_equipment");

                    b.HasOne("NexusApp.Areas.Storage.Models.VendorModel", "Vendor")
                        .WithMany("Vendor_Equipment")
                        .HasForeignKey("VendorRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_vendor_equipment_vendor");

                    b.Navigation("Equipment");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.GuaranteeModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Customer.Models.CustomerModel", null)
                        .WithMany("Guarantees")
                        .HasForeignKey("CustomerModelCustomerId");

                    b.HasOne("NexusApp.Areas.Employee.Models.EmployeeModel", null)
                        .WithMany("Guarantees")
                        .HasForeignKey("EmployeeModelEmployeeId");

                    b.HasOne("NexusApp.Areas.Survey.Models.SurveyModel", "surveyModel")
                        .WithOne("Guarantees")
                        .HasForeignKey("NexusApp.Areas.Survey.Models.GuaranteeModel", "SurveyRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_survey_guarantee");

                    b.Navigation("surveyModel");
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.InstallModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Survey.Models.SurveyModel", "Surveys")
                        .WithOne("Installs")
                        .HasForeignKey("NexusApp.Areas.Survey.Models.InstallModel", "SurveyRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_survey_install");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.SurveyModel", b =>
                {
                    b.HasOne("NexusApp.Areas.Customer.Models.CustomerModel", "Customer")
                        .WithMany("Surveys")
                        .HasForeignKey("CustomerRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_survey_Customer");

                    b.HasOne("NexusApp.Areas.Employee.Models.EmployeeModel", "Employee")
                        .WithMany("Surveys")
                        .HasForeignKey("EmployeeRefId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_survey_employee");

                    b.Navigation("Customer");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("NexusApp.Areas.Customer.Models.AccountModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NexusApp.Areas.Customer.Models.CustomerModel", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Guarantees");

                    b.Navigation("OrderDetails");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("NexusApp.Areas.Employee.Models.EmployeeModel", b =>
                {
                    b.Navigation("Guarantees");

                    b.Navigation("OrderDetails");

                    b.Navigation("Storages");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.ConnectionModel", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("NexusApp.Areas.Financial.Models.OrderDetailModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NexusApp.Areas.RetailShop.Models.RetailShopModel", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.ServiceConnectionModel", b =>
                {
                    b.Navigation("SubServiceConnectionModels");
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.ServiceModel", b =>
                {
                    b.Navigation("Connections");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("NexusApp.Areas.ServiceConnection.Models.SubServiceConnectionModel", b =>
                {
                    b.Navigation("ServiceModels");
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.EquipmentModel", b =>
                {
                    b.Navigation("OrderDetails");

                    b.Navigation("Vendor_Equipment");
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.StorageModel", b =>
                {
                    b.Navigation("Equipments");
                });

            modelBuilder.Entity("NexusApp.Areas.Storage.Models.VendorModel", b =>
                {
                    b.Navigation("Vendor_Equipment");
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.GuaranteeModel", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("NexusApp.Areas.Survey.Models.SurveyModel", b =>
                {
                    b.Navigation("Guarantees");

                    b.Navigation("Installs");
                });
#pragma warning restore 612, 618
        }
    }
}
